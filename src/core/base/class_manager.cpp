#include "core/base/class_manager.h"

#include "core/ark.h"

namespace ark {

Class* ClassManager::addClass(TypeId id, const char* name, std::unique_ptr<IClass> impl)
{
    const std::scoped_lock<std::mutex> guard(_mutex);

    if(const auto iter = _classes.find(id); iter != _classes.end() && !iter->second->isAutoGenerated())
        return iter->second.get();

    std::unique_ptr<Class>& classPtr = _classes[id];
    if(classPtr)
    {
        classPtr->_id = id;
        classPtr->_name = name;
        classPtr->_delegate = std::move(impl);
    }
    else
        classPtr = std::make_unique<Class>(id, name, std::move(impl));
    return classPtr.get();
}

Class* ClassManager::ensureClass(TypeId id)
{
    const std::scoped_lock<std::mutex> guard(_mutex);

    if(const auto iter = _classes.find(id); iter != _classes.end())
        return iter->second.get();

    const auto clazz = new Class(id);
    _classes[id] = std::unique_ptr<Class>(clazz);
    return clazz;
}

ClassManager& ClassManager::instance()
{
    return Ark::instance()._class_manager;
}

}
