#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
from os import path


def writetofile(filepath, content):
    dirname = path.dirname(filepath)
    if not path.isdir(dirname):
        os.makedirs(dirname)
    orgcontent = None
    if path.isfile(filepath):
        with open(filepath, 'rt') as fp:
            orgcontent = fp.read()
    if content != orgcontent:
        with open(filepath, 'wt') as fp:
            fp.write(content)


if __name__ == '__main__':

    if len(sys.argv) == 1:
        print('Usage: %s testcase_root_directory' % sys.argv[0])
        sys.exit(0)

    testcases = []
    externals = []
    for j in [i for i in os.listdir(sys.argv[1]) if i.endswith('.cpp')]:
        module = j[0: -4]
        externals.append('extern ark::unittest::TestCase* %s_create();' % module)
        testcases.append('''if(isTestCaseEnabled("%s", argc, argv)) {
        ark::unittest::TestCase* testcase = %s_create();
        int result = testcase->launch();
        if(result != 0) {
            printf("[%s] Failed. (result = %%d)\\n", result);
        } else {
            puts("[%s] Successed.");
        }
        delete testcase;
    }''' % (module, module, module, module))
    content = '\n\t'.join(testcases)
    src = '''/*
THIS FILE IS AUTOMATIC GENERATED BY %s, DO NOT EDIT.
*/

#include <stdio.h>
#include <string.h>

#include "core/ark.h"

#include "test/base/test_case.h"

%s

bool isTestCaseEnabled(const char* name, int argc, const char* argv[])
{
    if(argc < 2)
        return true;

    for(int i = 1; i < argc; i++)
        if(strcmp(name, argv[i]) == 0)
            return true;

    return false;
}

int main(int argc, const char* argv[])
{
    ark::Ark ark(argc, argv, "manifest.xml");
    %s
}
''' % (sys.argv[0], '\n'.join(externals), content)
    if len(sys.argv) > 2:
        writetofile(sys.argv[2], src)
    else:
        print(src)
