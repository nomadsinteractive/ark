#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
from os import path


def writetofile(filepath, content):
    dirname = path.dirname(filepath)
    if not path.isdir(dirname):
        os.makedirs(dirname)
    orgcontent = None
    if path.isfile(filepath):
        with open(filepath, 'rt') as fp:
            orgcontent = fp.read()
    if content != orgcontent:
        with open(filepath, 'wt') as fp:
            fp.write(content)


if __name__ == '__main__':

    if len(sys.argv) == 1:
        print('Usage: %s testcase_root_directory' % sys.argv[0])
        sys.exit(0)

    testcases = []
    externals = []
    for j in [i for i in os.listdir(sys.argv[1]) if i.endswith('.cpp')]:
        module = j[0: -4]
        externals.append('extern ark::unittest::TestCase* %s_create();' % module)
        testcases.append('''if(isTestCaseEnabled("%s", argc, argv)) {
        printf("--------------------------------- [%s] ---------------------------------\\n");
        ark::unittest::TestCase* testcase = %s_create();
        int result = testcase->launch();
        if(result != 0) {
            printf("Failed. (result = %%d)\\n", result);
        } else {
            puts("Successed.");
        }
        delete testcase;
    }''' % (module, module, module))
    content = '\n\t'.join(testcases)
    src = '''/*
THIS FILE IS AUTOMATIC GENERATED BY %s, MODIFICATIONS WILL BE ERASED.
*/

#include <stdio.h>
#include <string.h>

#include "core/ark.h"
#include "core/base/manifest.h"
#include "core/base/plugin.h"
#include "core/base/plugin_manager.h"
#include "core/types/global.h"
#include "core/util/numeric_util.h"

#include "test/base/test_case.h"

#include "platform/platform.h"

%s

bool isTestCaseEnabled(const char* name, int argc, const char* argv[])
{
    if(argc < 2)
        return true;

    for(int i = 1; i < argc; i++)
        if(strcmp(name, argv[i]) == 0)
            return true;

    return false;
}

namespace {

class Duration : public ark::Numeric {
public:
    Duration(const ark::sp<ark::Variable<uint64_t>>& ticker)
        : _ticker(ticker), _initial_ticket(0) {
    }

    virtual float val() override {
        if(!_initial_ticket) {
            _initial_ticket = _ticker->val();
            return 0;
        }
        return (_ticker->val() - _initial_ticket) / 1000000.0f;
    }
    
    virtual bool update(uint64_t /*timestamp*/) override {
        return true;
    }

private:
    ark::sp<ark::Variable<uint64_t>> _ticker;
    uint64_t _initial_ticket;
};

class NumericLinearBuilder : public ark::Builder<ark::Numeric> {
public:
    NumericLinearBuilder(ark::BeanFactory& /*factory*/, const ark::document& manifest)
        : _s(ark::Documents::getAttribute(manifest, "s", 0.0f)), _v(ark::Documents::getAttribute(manifest, "v", 0.0f)) {

    }

    virtual ark::sp<ark::Numeric> build(const ark::Scope& /*args*/) override {
        const ark::sp<Duration> t = ark::sp<Duration>::make(ark::Platform::getSteadyClock());
        return ark::NumericUtil::add(ark::NumericUtil::mul(_v, t), _s);
    }

private:
    float _s;
    float _v;
};

class NumericAccelerateBuilder : public ark::Builder<ark::Numeric> {
public:
    NumericAccelerateBuilder(ark::BeanFactory& /*factory*/, const ark::document& manifest)
        : _s(ark::Documents::getAttribute(manifest, "s", 0.0f)), _v(ark::Documents::getAttribute(manifest, "v", 0.0f)), _a(ark::Documents::getAttribute(manifest, "a", 0.0f)) {

    }

    virtual ark::sp<ark::Numeric> build(const ark::Scope& /*args*/) override {
        const ark::sp<Duration> t = ark::sp<Duration>::make(ark::Platform::getSteadyClock());
        const ark::sp<ark::Numeric> tsquare = ark::NumericUtil::mul(t, t);
        return ark::NumericUtil::add(_s, ark::NumericUtil::mul(0.5f, ark::NumericUtil::mul(_v, tsquare)));
    }

private:
    float _s;
    float _v;
    float _a;
};

class TestcasePlugin : public ark::Plugin {
public:
    TestcasePlugin()
        : Plugin("test", ark::Plugin::PLUGIN_TYPE_CORE) {
    }

    virtual ark::BeanFactory::Factory createBeanFactory(const ark::BeanFactory& beanFactory, const ark::sp<ark::Dictionary<ark::document>>& documentById) override {
        ark::BeanFactory::Factory refBeanFactory(beanFactory.references(), documentById);
        refBeanFactory.addBuilderFactory<ark::Numeric>("linear", [](ark::BeanFactory& factory, const ark::document& manifest)->ark::sp<ark::Builder<ark::Numeric>> { return ark::sp<ark::Builder<ark::Numeric>>::adopt(new NumericLinearBuilder(factory, manifest)); });
        refBeanFactory.addBuilderFactory<ark::Numeric>("accelerate", [](ark::BeanFactory& factory, const ark::document& manifest)->ark::sp<ark::Builder<ark::Numeric>> { return ark::sp<ark::Builder<ark::Numeric>>::adopt(new NumericAccelerateBuilder(factory, manifest)); });
        return refBeanFactory;
    }
};

}

namespace ark {

int32_t Ark::runTests(int argc, const char* argv[]) const {
    const Global<PluginManager> pluginManager;
    pluginManager->addPlugin(sp<TestcasePlugin>::make());
    %s
    return 0;
}

}

''' % (sys.argv[0], '\n'.join(externals), content)
    if len(sys.argv) > 2:
        writetofile(sys.argv[2], src)
    else:
        print(src)
