string(TOLOWER ${CMAKE_SYSTEM_NAME} SYSTEM)
string(TOLOWER ${CMAKE_CXX_COMPILER_ID} ARK_COMPILER_ID)
string(TOLOWER ${CMAKE_CXX_COMPILER_VERSION} ARK_COMPILER_VERSION)

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -wd4251 -wd4273)
else()
    add_compile_options("-Wall")
endif()

set(ARK_GENERATED_FILE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/generated)

if(NOT ARK_TOOLS_DIR)
set(ARK_TOOLS_DIR ${ARK_SRC_DIR}/tools/cmake)
endif()

macro(ark_subdir_list result curdir)
  file(GLOB children RELATIVE ${curdir} ${curdir}/*)
  set(LOCAL_DIR_LIST "")
  foreach(child ${children})
    if(IS_DIRECTORY ${curdir}/${child})
        list(APPEND LOCAL_DIR_LIST ${child})
    endif()
  endforeach()
  set(${result} ${LOCAL_DIR_LIST})
endmacro()

macro(ark_load_platform_specific)
list(APPEND LOCAL_INCLUDE_DIRS platform/${SYSTEM})
list(APPEND LOCAL_INCLUDE_DIRS ${ARK_SRC_DIR}/platform/${SYSTEM})
include(${ARK_SRC_DIR}/platform/${SYSTEM}/public.cmake OPTIONAL)
include(platform/${SYSTEM}/platform.cmake OPTIONAL)
string(REPLACE "." ";" LOCAL_VERSION_LIST ${ARK_COMPILER_VERSION})
list(LENGTH LOCAL_VERSION_LIST LOCAL_VERSION_LIST_LEN)
if(LOCAL_VERSION_LIST_LEN GREATER 0)
    list(GET LOCAL_VERSION_LIST 0 LOCAL_MAJOR_VERSION)
    include(platform/${ARK_COMPILER_ID}-${LOCAL_MAJOR_VERSION}/platform.cmake OPTIONAL)
endif()
endmacro()

macro(ark_unset_local_variables)
get_cmake_property(_variables VARIABLES)
foreach (i ${_variables})
    string(FIND ${i} "LOCAL_" _position)
    if(_position EQUAL 0)
        unset(${i})
    endif()
endforeach()
endmacro()

function(ark_apply_target_properties name)
    target_compile_definitions(${name} PRIVATE ${LOCAL_COMPILE_DEFINITIONS})
    target_compile_options(${name} PRIVATE ${LOCAL_COMPILE_OPTIONS})
    target_compile_features(${name} PRIVATE ${LOCAL_COMPILE_FEATURES})
    target_include_directories(${name} PRIVATE ${LOCAL_INCLUDE_DIRS})
endfunction()

function(ark_add_static_library name)
    ark_parse_dependencies(${ARGN})
    add_library(${name} STATIC ${LOCAL_SRC_LIST})
    ark_apply_target_properties(${name})
endfunction()

function(ark_add_shared_library name)
    ark_parse_dependencies(${ARGN})
    add_library(${name} SHARED ${LOCAL_SRC_LIST})
    ark_apply_target_properties(${name})
    target_link_libraries(${name} LINK_PRIVATE ${LOCAL_LIBS})
endfunction()

function(ark_add_executable name)
    ark_parse_dependencies(${ARGN})
    add_executable(${name} ${LOCAL_SRC_LIST})
    ark_apply_target_properties(${name})
    target_link_libraries(${name} LINK_PRIVATE ${LOCAL_LIBS})
endfunction()

macro(ark_add_plugin_library name)
    if(ARK_BUILD_STATIC_PLUGINS)
        ark_add_static_library(${name} ${ARGN})
        target_compile_options(${name} PRIVATE -DARK_FLAG_BUILDING_PLUGIN -DARK_BUILD_STATIC_PLUGINS -DARK_BUILD_STATIC)
        list(APPEND ARK_STATIC_LIBRARIES ${name})
        list(APPEND ARK_STATIC_PLUGINS ${name})
        list(APPEND ARK_STATIC_PLUGIN_DEPENDCIES ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt)
        ark_export(ARK_STATIC_LIBRARIES ARK_STATIC_PLUGINS ARK_STATIC_PLUGIN_DEPENDCIES)
    else()
        ark_add_shared_library(${name} ${ARGN})
        target_link_libraries(${name} LINK_PRIVATE ${ARK_RUNTIME_SHARED_LIBRARY})
    endif()
endmacro()

macro(ark_add_debug_flag)
    string(FIND "${CMAKE_CXX_FLAGS_DEBUG}" "-DARK_FLAG_DEBUG" LOCAL_POS)
    if(LOCAL_POS EQUAL -1)
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DARK_FLAG_DEBUG")
    endif()
endmacro()

macro(ark_setup_tools name)
foreach(i ${ARK_TOOLS_DIR})
    if(EXISTS ${i}/${name}.cmake)
        include(${i}/${name}.cmake)
        break()
    endif()
endforeach()
endmacro()

macro(ark_add_python_generated_unit UNIT_NAME WORKING_DIR SRC_PATH_LIST SCRIPT_PATH)
set(LOCAL_GENERATED_FILE_NAME ${ARK_GENERATED_FILE_DIRECTORY}/${UNIT_NAME})
if(NOT "${SRC_PATH_LIST}" STREQUAL "")
    string(REPLACE " " ";" SRC_PATH_LIST ${SRC_PATH_LIST})
    foreach(i IN LISTS SRC_PATH_LIST)
        file(GLOB_RECURSE LOCAL_FILES "${WORKING_DIR}/${i}/*.h")
        list(APPEND FILE_DEPENDS ${LOCAL_FILES})
    endforeach()
endif()
if(IS_ABSOLUTE SCRIPT_PATH)
    set(LOCAL_SCRIPT_PATH ${SCRIPT_PATH})
else()
    set(LOCAL_SCRIPT_PATH ${ARK_SRC_DIR}/${SCRIPT_PATH})
endif()
add_custom_command(OUTPUT ${LOCAL_GENERATED_FILE_NAME}.h ${LOCAL_GENERATED_FILE_NAME}.cpp
    COMMAND python ${LOCAL_SCRIPT_PATH} ${ARGN}
    DEPENDS ${FILE_DEPENDS} ${LOCAL_SCRIPT_PATH}
    WORKING_DIRECTORY ${WORKING_DIR})
list(APPEND LOCAL_GENERATED_SRC_LIST ${LOCAL_GENERATED_FILE_NAME}.h)
list(APPEND LOCAL_GENERATED_SRC_LIST ${LOCAL_GENERATED_FILE_NAME}.cpp)
endmacro()

macro(ark_add_generated_file GENERATOR GENERATED_FILE_NAMES WORKING_DIR DEPENDENCY_LIST)
if(${GENERATOR} MATCHES "[.]py$")
    set(LOCAL_GENERATOR_COMMAND python ${GENERATOR})
else()
    set(LOCAL_GENERATOR_COMMAND ${GENERATOR})
endif()
add_custom_command(OUTPUT ${GENERATED_FILE_NAMES}
    COMMAND ${LOCAL_GENERATOR_COMMAND} ${ARGN} ${GENERATED_FILE_NAMES}
    DEPENDS ${DEPENDENCY_LIST} ${GENERATOR}
    WORKING_DIRECTORY ${WORKING_DIR})
list(APPEND LOCAL_GENERATED_SRC_LIST ${GENERATED_FILE_NAMES})
endmacro()

function(ark_add_denpendency PATH LIB_NAME)
    ark_ensure_dependency(${PATH})
    add_subdirectory(${PATH})
    ark_link_libraries(${LIB_NAME})
    ark_export_dependency_libraries(${LIB_NAME})
    foreach(i ${ARGN})
        list(APPEND LOCAL_INCLUDE_DIRS ${i})
    endforeach()
    ark_export(LOCAL_INCLUDE_DIRS LOCAL_LIBS LOCAL_EXPORT_TARGETS)
endfunction()

macro(ark_export)
    foreach(i ${ARGN})
        set(${i} ${${i}} PARENT_SCOPE)
    endforeach()
endmacro()

macro(ark_compile_definition_option name)
    option(${name} ${ARGN})
    if(${${name}})
        ark_compile_options(-D${name})
    endif()
endmacro()

macro(ark_export_libraries)
    list(APPEND ARK_EXPORT_LIBRARIES ${ARGN})
endmacro()

macro(ark_dependency_libraries)
    foreach(i ${ARGN})
        list(APPEND ARK_DEPENDENCY_LIBRARIES ${i})
        if(ARK_BUILD_STATIC_LIBRARY)
            list(APPEND ARK_STATIC_LIBRARIES ${i})
        endif()
    endforeach()
endmacro()

macro(ark_export_dependency_libraries)
    ark_dependency_libraries(${ARGN})
    ark_export(ARK_DEPENDENCY_LIBRARIES)
endmacro()

macro(ark_export_dependency_3rdparty_libraries)
    if(ARK_BUILD_STATIC_PLUGINS)
        list(APPEND ARK_DEPENDENCY_3RDPARTY_LIBRARIES ${ARGN})
        ark_export(ARK_DEPENDENCY_3RDPARTY_LIBRARIES)
    endif()
endmacro()

macro(ark_link_libraries)
    list(APPEND LOCAL_LIBS ${ARGN})
endmacro()

macro(ark_compile_definitions)
    list(APPEND LOCAL_COMPILE_DEFINITIONS ${ARGN})
endmacro()

macro(ark_compile_options)
    list(APPEND LOCAL_COMPILE_OPTIONS ${ARGN})
endmacro()

macro(ark_compile_features)
    list(APPEND LOCAL_COMPILE_FEATURES ${ARGN})
endmacro()

macro(ark_include_directories)
    list(APPEND LOCAL_INCLUDE_DIRS ${ARGN})
endmacro()

macro(ark_parse_dependencies)
    unset(LOCAL_SRC_LIST)
    foreach(i ${ARGN})
        if(TARGET ${i})
            list(APPEND LOCAL_LIBS ${i})
        elseif(IS_ABSOLUTE ${i})
            list(APPEND LOCAL_SRC_LIST ${i})
        elseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${i})
            list(APPEND LOCAL_SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/${i})
        endif()
    endforeach()
endmacro()

macro(ark_test_big_endian)
    include(TestBigEndian)
    TEST_BIG_ENDIAN(IS_BIG_ENDIAN)
    if(IS_BIG_ENDIAN)
        list(APPEND LOCAL_COMPILE_DEFINITIONS -DARK_IS_BIG_ENDIAN=1)
    else()
        list(APPEND LOCAL_COMPILE_DEFINITIONS -DARK_IS_BIG_ENDIAN=0)
    endif()
endmacro()

macro(ark_ensure_dependency TARGET_DIR)
    if(ARK_DOWNLOAD_DEPENDENCIES)
        execute_process(COMMAND python ${ARK_SRC_DIR}/tools/python/dependency.py ${TARGET_DIR} ${ARGN}
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    endif()
endmacro()

macro(ark_find_vulkan)
    find_package(Vulkan)

    if(NOT Vulkan_FOUND)
        message(FATAL_ERROR "No Vulkan libraries found")
    else()
        message("Vulkan include dirs: " ${Vulkan_INCLUDE_DIRS})
        message("Vulkan libraries: " ${Vulkan_LIBRARIES})
    endif()

    ark_include_directories(${Vulkan_INCLUDE_DIRS})
    ark_link_libraries(${Vulkan_LIBRARIES})
endmacro()

macro(ark_add_plugin_directory NAME DIR_NAME)
    string(TOUPPER ARK_BUILD_PLUGIN_${NAME} LOCAL_OPT_NAME)
    option(${LOCAL_OPT_NAME} "Build Plugin ${NAME}" ON)
    if(${${LOCAL_OPT_NAME}})
        add_subdirectory(${DIR_NAME})
    endif()
endmacro()

macro(ark_find_and_link_libraries)
    foreach(i ${ARGN})
        find_library(${i}_LIBRARY ${i})
        if(${i}_LIBRARY EQUAL ${i}_LIBRARY-NOTFOUND)
            message(FATAL_ERROR "Library not found: " ${i})
        endif()
        ark_link_libraries(${${i}_LIBRARY})
    endforeach()
endmacro()

ark_unset_local_variables()
file(GLOB_RECURSE LOCAL_RES_LIST "*.h" "*.hpp" "*.py" "*.xml" "*.json" "*.md" "*.yaml" "*.glsl" "*.vert" "*.frag" "*.geom" "*.cmake")
ark_load_platform_specific()
